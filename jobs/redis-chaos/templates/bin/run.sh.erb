#!/usr/bin/env bash

set -euf -o pipefail

export PATH=$PATH:/var/vcap/packages/redis-5/bin:/var/vcap/jobs/bpm/bin

REDIS_CONF=/var/vcap/jobs/redis/config/redis.conf
SENTINEL_CONF=/var/vcap/store/redis-sentinel/config/sentinel.conf

death_probability=<%= p("death_probability") %>
ruin_probability=<%= p("ruin_probability") %>
segfault_probability=<%= p("segfault_probability") %>
sleep_probability=<%= p("sleep_probability") %>
timestamp=$(date "+%Y%m%d%H%M")

# fail hard and fast if affected_zone does not match instance region zone or is empty
<%
if_p("affected_zone") do |az|
  if az != spec.az %>
echo Region zone <%= spec.az %> is not targeted by chaos.
exit 0
<%
  end
end %>

<%
redis_link = link("redis")
sentinel_link = link("redis-sentinel")
redis_port = redis_link.p("port")
sentinel_port = sentinel_link.p("sentinel.port")
password = redis_link.p("password")
bootstrap_host = redis_link.instances.find { |redis| redis.bootstrap }.address
%>

master_host=""
bootstrap_host=<%= bootstrap_host %>
port="<%= redis_port %>"
password="<%= password %>"
instance_id=<%= spec.id %>

for sentinel in <%= sentinel_link.instances.map {|s| s.address }.join(" ") %>; do
  set +e
  master_host=$(redis-cli -h $sentinel -p <%= sentinel_port %> --raw sentinel masters 2>/dev/null | xargs -n 2 | grep "ip " | cut -d " " -f2)
  set -e
  if [ -n "$master_host" ]; then
    break
  fi
done

if [ -z "$master_host" ]; then
  echo Master went AWOL. Go catch it.
  exit 1
fi

# get a random number between 1-100
death_roll=$[ $RANDOM % 100 + 1 ]
ruin_roll=$[ $RANDOM % 100 + 1 ]
segfault_roll=$[ $RANDOM % 100 + 1 ]
sleep_roll=$[ $RANDOM % 100 + 1 ]

ruin_redis() {
  sleep 5
  echo cannot run from the chaos >> $REDIS_CONF
  /var/vcap/bosh/bin/monit restart redis
}

ruin_sentinel() {
  sleep 5
  echo cannot run from the chaos >> $SENTINEL_CONF
  /var/vcap/bosh/bin/monit restart redis-sentinel
}

kill_instance() {
  sleep 5
  halt -d -f -p
}

segfault_redis() {
  sleep 5
  redis-cli -p $port -a "$password" DEBUG SEGFAULT
}

sleep_redis() {
  sleep 5
  redis-cli -p $port -a "$password" DEBUG SLEEP 30
}

# based on the death_probability property 0-100 declare if instance is killable where 0 is never and >=100 is certain
# based on the ruin_probability property 0-100 declare if service should be ruined instead where 0 is never and >=100 is certain

# kill instance if death_probability is reached
if [[ $death_probability -ge 1 && $death_roll -le $death_probability ]]; then
  cat<<EOF
Death probablility set $death_probability
Death rolled $death_roll
This machine needs to die. Sorry.
EOF

  kill_instance </dev/null &>/dev/null &
fi

# if ruin_probability is reached and the machine is a redis instance
# terminate redis service and ruin redis configuration
if [[ -f $REDIS_CONF && $ruin_probability -ge 1 && $ruin_roll -le $ruin_probability ]]; then
  cat<<EOF
Ruin probablility set $ruin_probability
Ruin rolled $ruin_roll
This redis service will be tampered and will not recover this. Sorry.
EOF

  ruin_redis </dev/null &>/dev/null &
fi

# if segfault_probability is reached and the machine is a redis instance
# segfault redis service
if [[ -f $REDIS_CONF && $segfault_probability -ge 1 && $segfault_roll -le $segfault_probability ]]; then
  cat<<EOF
Segfault probablility set $segfault_probability
Segfault rolled $segfault_roll
This redis service will crash. Sorry.
EOF

  segfault_redis </dev/null &>/dev/null &
fi

# if sleep_probability is reached and the machine is a redis instance
# pause redis service
if [[ -f $REDIS_CONF && $sleep_probability -ge 1 && $sleep_roll -le $sleep_probability ]]; then
  cat<<EOF
Sleep probablility set $sleep_probability
Sleep rolled $sleep_roll
This redis service will be paused for a while. Sorry.
EOF

  sleep_redis </dev/null &>/dev/null &
fi

# if ruin_probability is reached and the machine is a redis-sentinel instance
# terminate redis-sentinel service and ruin redis-sentinel configuration
if [[ -f $SENTINEL_CONF && $ruin_probability -ge 1 && $ruin_roll -le $ruin_probability ]]; then
  cat<<EOF
Ruin probablility set $ruin_probability
Ruin rolled $ruin_roll
This redis-sentinel service will be tampered and will not recover this. Sorry.
EOF

  ruin_sentinel </dev/null &>/dev/null &
fi
