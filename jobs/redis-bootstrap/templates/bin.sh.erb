#!/usr/bin/env bash

set -euf -o pipefail

REDIS_CONF=/var/vcap/store/jobs/redis/config/redis.conf
BOOTSTRAPED=/var/vcap/store/jobs/redis/.bootstrapped

# fast exit if bootstrapped
if [ -f $BOOTSTRAPED ]; then
  exit 0
fi

<%
link_redis = link("redis")
link_to_master =  link_redis.instances.find {|redis| redis.bootstrap }
if link_redis.p("redis.replication") == true %>

if [ -f $REDIS_CONF ]; then

cat<<EOF >> $REDIS_CONF
################################# REPLICATION #################################

# Master-Slave replication. Use slaveof to make a Redis instance a copy of
# another Redis server. Note that the configuration is local to the slave
# so for example it is possible to configure the slave to save the DB with a
# different interval, or to listen to another port, and so on.
#
<% unless link_redis.p("master_host", link_to_master.address.to_s == spec.address.to_s -%>
replicaof <%= link_redis.p("master_host", link_to_master.address.to_s) %> <%= link_redis.p("port") %>
<% end -%>

# If the master is password protected (using the "requirepass" configuration
# directive below) it is possible to tell the slave to authenticate before
# starting the replication synchronization process, otherwise the master will
# refuse the slave request.
#
<% if link_redis.p("password") != "" %>
masterauth <%= link_redis.p("password") %>
<% end %>
EOF

touch $BOOTSTRAPED
fi

<% end %>