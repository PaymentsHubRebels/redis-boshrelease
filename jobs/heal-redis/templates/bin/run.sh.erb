#!/usr/bin/env bash

set -euf -o pipefail

export PATH=$PATH:/var/vcap/packages/redis-5/bin:/var/vcap/jobs/bpm/bin

REDIS_CONF=/var/vcap/jobs/redis/config/redis.conf
DEFAULT_REDIS_CONF=/var/vcap/jobs/redis/config/redis.conf.default
TMP_REDIS_CONF=$(mktemp)
RECONFIGURE_REDIS=/var/vcap/jobs/heal-redis/config/redis.conf.sh
SENTINEL_CONF=/var/vcap/store/redis-sentinel/config/sentinel.conf
TMP_SENTINEL_CONF=(mktemp)
RECONFIGURE_SENTINEL=/var/vcap/jobs/heal-redis/config/sentinel.conf.sh
SENTINEL_ORIGINAL_CONF=/var/vcap/jobs/redis-sentinel/config/sentinel.conf

chmod +x $RECONFIGURE_REDIS $RECONFIGURE_SENTINEL

<%
redis_link = link("redis")
sentinel_link = link("redis-sentinel")
redis_port = redis_link.p("port")
sentinel_port = sentinel_link.p("sentinel.port")
password = redis_link.p("password")
bootstrap_host = redis_link.instances.find { |redis| redis.bootstrap }.address
sentinel_quorum = sentinel_link.p("sentinel.quorum")
%>

bootstrap_host=<%= bootstrap_host %>
port="<%= redis_port %>"
password="<%= password %>"
sentinel_quorum=<%= sentinel_quorum %>
sentinel_port=<%= sentinel_port %>
instance_ip=<%= spec.ip %>

identify_master() {
  local master_host=""
  local sentinel_port=$1

  # identify from sentinels which is the master ip and port
  for sentinel in <%= sentinel_link.instances.map {|s| s.address }.join(" ") %>; do
    set +e
    master_host=$(redis-cli -h $sentinel -p $sentinel_port --raw sentinel masters | xargs -n 2 | grep "ip " | cut -d " " -f2)
    set -e
    if [ -n "$master_host" ]; then
      break
    fi
  done
  printf "%s" $master_host
}

search_for_master() {
  local master_host=""
  local port=$1
  local password=$1

  # identify from sentinels which is the master ip and port
  for redis in <%= redis_link.instances.map {|s| s.address }.join(" ") %>; do
    set +e
    if redis-cli -h $redis -p $port -a $password info | grep 'role:master'; then
      master_host=$redis
      break
    fi
    set -e
  done
  printf "%s" $master_host
}

master_host=$(identify_master $sentinel_port)

# if the machine is a redis-sentinel instance
# setup $SENTINEL_CONF
if [ -f $SENTINEL_CONF ]; then
  # None of the sentinels knows a master do a full reset while asking redis instead
  if [ -z "${master_host}" ]; then
    echo Could not find a proper master. Reseting sentinel
    master_host=$(search_for_master $port "$password")
    if [ -z "$master_host"]; then
      echo "None of the redis instances declared itself as master. Reseting master to bootsrtrap $bootstrap_host"
      master_host=$bootstrap_host
    fi
    cp -f $SENTINEL_ORIGINAL_CONF $TMP_REDIS_CONF
    # run the template script and append it to $TMP_SENTINEL_CONF
    master_host=$master_host port=$port password=$password sentinel_quorum=$sentinel_quorum $RECONFIGURE_SENTINEL >> $TMP_SENTINEL_CONF
    # replace $SENTINEL_CONF with $TMP_SENTINEL_CONF
    mv -f $TMP_SENTINEL_CONF $SENTINEL_CONF

    # restart redis-sentinel
    /var/vcap/bosh/bin/monit restart redis-sentinel
  fi
  if bpm list | grep redis-sentinel | grep failed; then
    echo Sentinel failing. Reseting sentinel
    cp -f $SENTINEL_ORIGINAL_CONF $TMP_REDIS_CONF
    # run the template script and append it to $TMP_SENTINEL_CONF
    master_host=$master_host port=$port password=$password sentinel_quorum=$sentinel_quorum $RECONFIGURE_SENTINEL >> $TMP_SENTINEL_CONF
    # replace $SENTINEL_CONF with $TMP_SENTINEL_CONF
    mv -f $TMP_SENTINEL_CONF $SENTINEL_CONF
  fi
fi
